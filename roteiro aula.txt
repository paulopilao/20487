

20487 

ir fazendo e subindo para o git

Modulo 1
dotnet new webapi --name Modulo1.Api --output c:\dev\aulas\Modulo1\Modulo1.Api
dotnet add package Microsoft.EntityFrameworkCore.SqlServer
dotnet add package Microsoft.EntityFrameworkCore.SqlServer.Design
dotnet restore
code .
====
Criar webapp + sql
senha banco !QAZ.2wsx.
===
FAZER SCAFFOLD DO BANCO ANTES DISSO

    public enum ECategoria{
        Aventura,
        Terror,
        Drama,
        Comedia

    }
    public class Filme
    {
        public Filme(int id, string nome, ECategoria categoria, int anoLancamento)
        {
            this.Id = id;
            this.Nome = nome;
            this.Categoria = categoria;
            this.AnoLancamento = anoLancamento;

        }
        public int Id { get; set; }
        public string Nome { get; set; }
        public ECategoria Categoria { get; set; }
        public int AnoLancamento { get; set; }
    }
======	
CREATE TABLE Filmes 
(
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Nome varchar(255),
    Categoria int,
    AnoLancamento int
)
==========

dotnet ef DbContext Scaffold "Data Source=tcp:20487.database.windows.net,1433;Initial Catalog=modulo1pipsdb;User Id=pilao@20487.database.windows.net;Password=!QAZ.2wsx.;" Microsoft.EntityFrameworkCore.SqlServer -o Models -c FilmeContext

=======
arrumar startup para a connection string 
            services.AddDbContext<FilmeContext>(opt => opt.UseSqlServer(Configuration.GetConnectionString("defaultConnection")));
incluir connectionstring
  "ConnectionStrings": {
    "defaultConnection": "Data Source=tcp:20487.database.windows.net,1433;Initial Catalog=modulo1pipsdb;User Id=pilao@20487.database.windows.net;Password=!QAZ.2wsx.;"
  }
  ======
criar o controller para o filme
criar a pasta properties/PublishProfiles
e criar o arquivo Azure.pubxml
colocar esse texto la
<Project>
    <PropertyGroup>
      <PublishProtocol>Kudu</PublishProtocol>
      <PublishSiteName>modulo1pips</PublishSiteName>
      <UserName>paulopilao</UserName>
      <Password>1234asdf</Password>
    </PropertyGroup>
</Project>
mudar a senha do ftp no azure antes
dotnet publish /p:PublishProfile=Azure /p:Configuration=Release

======
fazer o post no controller e publicar de novo
incluir registro via powershell
$postParams = "{
    'nome': 'De volta para o futuro',
    'categoria': 2,
    'anoLancamento': 1985}"
Invoke-WebRequest -Uri https://modulo1pips.azurewebsites.net/api/filmes -ContentType "application/json" -Method POST -Body $postParams


Modulo 2
Demonstracao 1
dotnet new console --name Demonstracao1 --output c:\dev\20487\aulas\modulo2\Demonstracao1


ADO
Popular banco com seed, ensurecreated

dotnet new classlib --name Modulo2.DAL --output c:\dev\aulas\modulo2\modulo2.DAL
dotnet add package Microsoft.EntityFrameworkCore.SqlServer

cria Web App + SQL
CREATE TABLE Clientes 
(
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Nome varchar(255),
    Cpf varchar(255)
)

CREATE TABLE Pedidos 
(
    Id INT IDENTITY(1,1) PRIMARY KEY,
    ValorTotal decimal,
    ClienteId int
)
dotnet new console --name Modulo2.ConsoleApp --output c:\dev\aulas\modulo2\modulo2.ConsoleApp
dotnet new webapi --name Modulo2.Api --output c:\dev\aulas\Modulo2\Modulo2.Api
dotnet add reference ../Modulo2.Dal/Modulo2.Dal.csproj

dotnet new console --name Modulo2.ConsoleApp --output c:\dev\aulas\modulo2\modulo2.ConsoleApp
dotnet add package Microsoft.EntityFrameworkCore.SqlServer
 dotnet restore
 ========================================================
CREATE PROCEDURE sp_selectProduct @nome varchar(50)
AS
SELECT * FROM Products
GO;

(localdb)\\MSSQLLocalDB 



============================
Modulo 3
Demonstracao 1
dotnet new webapi --name Demonstracao1 --output c:\dev\20487\aulas\modulo3\Demonstracao1

Demonstracao 2
dotnet new webapi --name Demonstracao2 --output c:\dev\20487\aulas\modulo3\Demonstracao2

Demonstracao 3 e 4 (colocando o return notfound)
dotnet new sln -o Demonstracao3 --output c:\dev\20487\aulas\modulo3\Demonstracao3
entra na pasta
dotnet new console -o Demonstracao3.Client
dotnet new webapi -o Demonstracao3.Host
dotnet sln Demonstracao3.sln add Demonstracao3.Client\Demonstracao3.Client.csproj Demonstracao3.Host\Demonstracao3.Host.csproj
entra na pasta do client
dotnet add package Microsoft.AspNet.WebApi.Client
dotnet restore
entrar no client e digitar
dotnet dev-certs https --trust

Demonstracao 5
dotnet new webapi --name Demonstracao4 --output c:\dev\20487\aulas\modulo3\Demonstracao5

Modulo 4
dotnet new webapi --name Demonstracao1 --output c:\dev\20487\aulas\modulo4\Demonstracao1
incluir controller e model 
using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;

public class LoggingPilaoMiddleware
    {
        private readonly string _caminho;
        private readonly RequestDelegate _next;
        private readonly IConfiguration _configuration;
        private readonly IHostingEnvironment _environment;

        public LoggingPilaoMiddleware(RequestDelegate next,IConfiguration configuration,IHostingEnvironment environment)
        {
            _next = next;
            this._configuration = configuration;
            _environment = environment;
            _caminho = Path.Combine(_environment.ContentRootPath, "arquivo.txt");
        }

        public async Task Invoke(HttpContext httpContext)
        {
            try
            {
                await LogAsync(httpContext);
                await _next(httpContext);
            }
            catch (Exception ex)
            {
                //await LogAsync(httpContext, ex);
            }
        }

        private async Task LogAsync(HttpContext context)
        {
            var mensagem = string.Empty;
            mensagem += context.Request.Path + "pips";
            File.AppendAllLines(_caminho, new string[]{mensagem});
        }
    }

    // Extension method used to add the middleware to the HTTP request pipeline.
    public static class LoggingPilaoMiddlewareExtensions
    {
        public static IApplicationBuilder UseLoggingPilaoMiddleware(this IApplicationBuilder builder)
        {
            return builder.UseMiddleware<LoggingPilaoMiddleware>();
        }
    }
alterar startup
================================================
	
Modulo 5

demonstracao 1
cd c:\Allfiles\Mod05\DemoFiles\HostInWindowsService
dotnet publish --configuration Release --output c:\Allfiles\Mod05\DemoFiles\HostInWindowsService
sc create HotelsService binPath= "c:\Allfiles\Mod05\DemoFiles\HostInWindowsService\BlueYonder.Hotels.Service.exe"

demonstracao 2
docker run -it --rm -p 8000:80 --name aspnetcore_sample microsoft/dotnet-samples:aspnetapp
dotnet new webapi --name BlueYonder.Hotels.Service --output C:\Allfiles\Mod05\DemoFiles\Host_In_Docker
  dotnet new webapi --name BlueYonder.Hotels.Service --output C:\Allfiles\Mod05\DemoFiles\Host_In_Docker
  cd C:\Allfiles\Mod05\DemoFiles\Host_In_Docker



============================
Modulo 6

1.Criar uma aplicacao no Visual Studio , criar um site no azure e fazer o deploy via publish (normal)
2.Linux
	1. Criar uma vm linux no azure	
	2. CRiar uma api e colocar o codigo abaixo dentro do csproj no meio de propertygroup
		<RuntimeIdentifiers>win10-x64;osx.10.11-x64;ubuntu.16.10-x64</RuntimeIdentifiers>
	3. Gerar o publishdotnet 
		publish -c release -r ubuntu.16.10-x64
	4. Vai na vm e connect
		pega o ssh e conecta ssh pilao@23.99.195.238
		cd /var
		sudo mkdir demosntracao
		sudo chown pilao demonstracao
	5. abre outro dos , vai para dev\20487\aulas\modulo06\linuxapp\bin\release\netcoreapp2.2 e digita:
		 scp -r .\ubuntu.18.10-x64\ pilao@23.99.195.238:/var/demonstracao
	6. na vm linux cd /
		sudo -s
		nginx=stable
		add-apt-repository ppa:nginx/$nginx
		apt-get update
		apt-get install nginx
		sudo service nginx start
	7. no browser http://<server_IP_address>/index.nginx-debian.html
	8. no linux
		cd /etc/nginx/sites-available/
		sudo vi default
		ESC + i
		no location mudar para isso
		proxy_pass         http://localhost:5000;
		proxy_http_version 1.1;
		proxy_set_header   Upgrade $http_upgrade;
		proxy_set_header   Connection keep-alive;
		proxy_set_header   Host $host;
		proxy_cache_bypass $http_upgrade;
		proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header   X-Forwarded-Proto $scheme;
		ESC + : + x + Enter.
		sudo nginx -t
		sudo nginx -s reload
		cd /var/demonstracao/ubuntu.18.10-x64/publish/
		chmod a+x ./linuxapp
		./linuxapp
		ver no browser de novo com o /api/values
3. CI
	1. Criar um site no azure 
	2. criar um projeto no azuredevops https://dev.azure.com/paulopilao
	3. fazer clone 
	4. Criar uma app no .net core webapi e subir fazendo push
	5. criar o build e o publish
4. Stage slot
	1. criar um site no azure  F1
	2. alterar as credenciais ftp
	3. adicionar um slot
	4. criar um projeto no .netcore webapi
	5. colocar dois perfis de publicacao
	6. gerar a publicacao
	dotnet publish /p:PublishProfile=Azure /p:Configuration=Release
	mudar o controller para aparecer uma imagem 
	dotnet publish /p:PublishProfile=Staging /p:Configuration=Release
	https://mod6demo4-{YourInitials}-staging.azurewebsites.net/api/values
5. API management
	1. criar um API management
	2. adicionar essa api => 	http://conferenceapi.azurewebsites.net/?format=json e testar ela
	
6. alterar api management
	1. <rate-limit-by-key calls="2" renewal-period="60" counter-key="@(context.Subscription.Id)" />


===========================
Modulo 7
1. Storage 
		1. Criar um storage  Locally-redundant storage (LRS).
		2. Criar um container Public access level : Private (no anonymous access).
		3. Pegar em settings a connection string
		4. Ir na app do modu7 Mod7Demo1Blob e colocar a connection string
		5. digitar dotnet dev-certs https --trust
		6. no powershell digitar =>[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12; Invoke-WebRequest -Uri https://localhost:5001/api/reservation/createvoucher -ContentType "application/json" -Method POST -Body "'pips'"
		7. depois pegar o guid e 
		$request = Invoke-WebRequest -Uri https://localhost:5001/api/reservation/Voucher/{GUID}  -Method Get
		$request.Content

2. Import de dados 
		1. Entrar no storage criado acima 
		2. criar um container qquer
		3. subir um bacpak que ta em Allfiles\Mod07\Demofiles\Mod7Demo2bacpac
		4. ir em um banco de dados e acessar o server dele e deois importar esse bacppac
		5. mudar o firewall no banco e acessar via client qquer
3. Mongo
		1. criar um banco no cosmos
		2. colocar mydb/customers/customerId
		3. baixar o mongo , pegar a string de conexao e executar os comandos por la
		db.customers.find()
		show collections
		show databases
		db.customers.insert({customerId: "5", firstName: "Sean", lastName: "Stewart"})
		db.customers.insertMany([
    {
      customerId: "1",
      firstName: "Kevin",
      lastName: "Liu"
    },
    {
      customerId: "2",
      firstName: "Martin",
      lastName: "Weber"
    },
    {
      customerId: "3",
      firstName: "George",
      lastName: "Li"
    },
    {
      customerId: "4",
      firstName: "Lisa",
      lastName: "Miller"
    },
    {
      customerId: "5",
      firstName: "Sean",
      lastName: "Stewart"
    }
    ])
	db.customers.find()
	 db.customers.count()
4. Graph
	Criar um banco cosmosdb com graph
	usar pessoas como exemplo
	
Modulo8
1. Log
	1. Criar um projeto e setar o log
	colocar no program depois do WebHost.CreateDefaultBuilder(args)
	 .ConfigureLogging((hostingContext, logging) => 
	 {
		 logging.AddConsole();
		 logging.AddEventSourceLogger();
	 })	
	 2. Colocar no controller 
	 public ValuesController(ILogger<ValuesController> logger)
		{
			_logger = logger;
		}
	 private readonly ILogger _logger;
	3. botar isso => _logger.LogInformation("Getting all values");
	
2. Log4net
	1. Colocar isso no program
	        public static void Main(string[] args)
        {
            var logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());
            XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));
            CreateWebHostBuilder(args).Build().Run();
        }
	2. Isso no controller
	                private static readonly ILog _logger = LogManager.GetLogger(typeof(ValuesController));
	3. Colocar o config que esta no repo 

		
Q coisa feia eh essa ai atras do seu  oculos
102 negao		
		

	
		


=============================
dotnet new sln -o MyWebApp
dotnet new mvc -o MyWebApp.Client
dotnet new classlib -o MyWebApp.DataStore
dotnet new mstest -o MyWebApp.DataStoreTest

dotnet sln MyWebApp.sln add .\MyWebApp.Client\MyWebApp.Client.csproj .\MyWebApp.DataStore\MyWebApp.DataStore.csproj .\MyWebApp.DataStoreTest\MyWebApp.DataStoreTest.csproj

dotnet add .\MyWebApp.Client\MyWebApp.Client.csproj reference .\MyWebApp.DataStore\MyWebApp.DataStore.csproj

dotnet add .\MyWebApp.DataStoreTest\MyWebApp.DataStoreTest.csproj reference .\MyWebApp.DataStore\MyWebApp.DataStore.csproj

dotnet test .\MyWebApp.DataStoreTest\MyWebApp.DataStoreTest.csproj